/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GammaControllerInterface extends ethers.utils.Interface {
  functions: {
    "getAccountVaultCounter(address)": FunctionFragment;
    "getPayout(address,uint256)": FunctionFragment;
    "getVaultWithDetails(address,uint256)": FunctionFragment;
    "isOperator(address,address)": FunctionFragment;
    "isSettlementAllowed(address)": FunctionFragment;
    "operate(tuple[])": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountVaultCounter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayout",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWithDetails",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSettlementAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [
      {
        actionType: BigNumberish;
        owner: string;
        secondAddress: string;
        asset: string;
        vaultId: BigNumberish;
        amount: BigNumberish;
        index: BigNumberish;
        data: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountVaultCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWithDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSettlementAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;

  events: {};
}

export class GammaController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GammaControllerInterface;

  functions: {
    getAccountVaultCounter(
      _accountOwner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultWithDetails(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string[],
          string[],
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber[]
        ] & {
          shortOtokens: string[];
          longOtokens: string[];
          collateralAssets: string[];
          shortAmounts: BigNumber[];
          longAmounts: BigNumber[];
          collateralAmounts: BigNumber[];
        },
        BigNumber,
        BigNumber
      ]
    >;

    isOperator(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operate(
      _actions: {
        actionType: BigNumberish;
        owner: string;
        secondAddress: string;
        asset: string;
        vaultId: BigNumberish;
        amount: BigNumberish;
        index: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: string,
      _isOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAccountVaultCounter(
    _accountOwner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayout(
    _otoken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultWithDetails(
    _owner: string,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string[], string[], string[], BigNumber[], BigNumber[], BigNumber[]] & {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumber[];
        longAmounts: BigNumber[];
        collateralAmounts: BigNumber[];
      },
      BigNumber,
      BigNumber
    ]
  >;

  isOperator(
    _owner: string,
    _operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSettlementAllowed(
    _otoken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operate(
    _actions: {
      actionType: BigNumberish;
      owner: string;
      secondAddress: string;
      asset: string;
      vaultId: BigNumberish;
      amount: BigNumberish;
      index: BigNumberish;
      data: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: string,
    _isOperator: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountVaultCounter(
      _accountOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWithDetails(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string[],
          string[],
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber[]
        ] & {
          shortOtokens: string[];
          longOtokens: string[];
          collateralAssets: string[];
          shortAmounts: BigNumber[];
          longAmounts: BigNumber[];
          collateralAmounts: BigNumber[];
        },
        BigNumber,
        BigNumber
      ]
    >;

    isOperator(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operate(
      _actions: {
        actionType: BigNumberish;
        owner: string;
        secondAddress: string;
        asset: string;
        vaultId: BigNumberish;
        amount: BigNumberish;
        index: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operator: string,
      _isOperator: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAccountVaultCounter(
      _accountOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWithDetails(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOperator(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operate(
      _actions: {
        actionType: BigNumberish;
        owner: string;
        secondAddress: string;
        asset: string;
        vaultId: BigNumberish;
        amount: BigNumberish;
        index: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: string,
      _isOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountVaultCounter(
      _accountOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultWithDetails(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      _owner: string,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operate(
      _actions: {
        actionType: BigNumberish;
        owner: string;
        secondAddress: string;
        asset: string;
        vaultId: BigNumberish;
        amount: BigNumberish;
        index: BigNumberish;
        data: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: string,
      _isOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
