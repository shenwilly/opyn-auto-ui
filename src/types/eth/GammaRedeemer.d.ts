/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GammaRedeemerInterface extends ethers.utils.Interface {
  functions: {
    "addressBook()": FunctionFragment;
    "automator()": FunctionFragment;
    "automatorTreasury()": FunctionFragment;
    "calculator()": FunctionFragment;
    "cancelOrder(uint256)": FunctionFragment;
    "controller()": FunctionFragment;
    "createOrder(address,uint256,uint256)": FunctionFragment;
    "getExcessCollateral(tuple,uint256)": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "getOrders()": FunctionFragment;
    "getOrdersLength()": FunctionFragment;
    "getRedeemPayout(address,uint256)": FunctionFragment;
    "getRedeemableAmount(address,address,uint256)": FunctionFragment;
    "getVaultOtoken(tuple)": FunctionFragment;
    "getVaultWithDetails(address,uint256)": FunctionFragment;
    "harvest(address,uint256,address)": FunctionFragment;
    "hasExpiredAndSettlementAllowed(address)": FunctionFragment;
    "isAutomatorEnabled()": FunctionFragment;
    "isOperatorOf(address)": FunctionFragment;
    "isSettlementAllowed(address)": FunctionFragment;
    "isValidVaultId(address,uint256)": FunctionFragment;
    "isWhitelistedOtoken(address)": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "processOrder(uint256)": FunctionFragment;
    "processOrders(uint256[])": FunctionFragment;
    "redeemFee()": FunctionFragment;
    "refreshConfig()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddressBook(address)": FunctionFragment;
    "setAutomator(address)": FunctionFragment;
    "setAutomatorTreasury(address)": FunctionFragment;
    "setRedeemFee(uint256)": FunctionFragment;
    "setSettleFee(uint256)": FunctionFragment;
    "settleFee()": FunctionFragment;
    "shouldProcessOrder(uint256)": FunctionFragment;
    "shouldRedeemOtoken(address,address,uint256)": FunctionFragment;
    "shouldSettleVault(address,uint256)": FunctionFragment;
    "startAutomator(address)": FunctionFragment;
    "stopAutomator()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelist()": FunctionFragment;
    "withdrawFund(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressBook",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "automator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "automatorTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExcessCollateral",
    values: [
      {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOrders", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOrdersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemPayout",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemableAmount",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultOtoken",
    values: [
      {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWithDetails",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasExpiredAndSettlementAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAutomatorEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSettlementAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidVaultId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedOtoken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processOrders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "redeemFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refreshConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressBook",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatorTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettleFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settleFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shouldProcessOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldRedeemOtoken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldSettleVault",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startAutomator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stopAutomator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFund",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "automator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatorTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calculator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExcessCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWithDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasExpiredAndSettlementAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAutomatorEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSettlementAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refreshConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddressBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatorTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settleFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldProcessOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldRedeemOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldSettleVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAutomator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopAutomator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFund",
    data: BytesLike
  ): Result;

  events: {
    "OrderCreated(uint256,address,address)": EventFragment;
    "OrderFinished(uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class GammaRedeemer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GammaRedeemerInterface;

  functions: {
    addressBook(overrides?: CallOverrides): Promise<[string]>;

    automator(overrides?: CallOverrides): Promise<[string]>;

    automatorTreasury(overrides?: CallOverrides): Promise<[string]>;

    calculator(overrides?: CallOverrides): Promise<[string]>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    createOrder(
      _otoken: string,
      _amount: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getExcessCollateral(
      _vault: {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      },
      _typeVault: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber,
          boolean
        ] & {
          owner: string;
          otoken: string;
          amount: BigNumber;
          vaultId: BigNumber;
          isSeller: boolean;
          toETH: boolean;
          fee: BigNumber;
          finished: boolean;
        }
      ]
    >;

    getOrders(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          BigNumber,
          boolean
        ] & {
          owner: string;
          otoken: string;
          amount: BigNumber;
          vaultId: BigNumber;
          isSeller: boolean;
          toETH: boolean;
          fee: BigNumber;
          finished: boolean;
        })[]
      ]
    >;

    getOrdersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRedeemPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedeemableAmount(
      _owner: string,
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultOtoken(
      _vault: {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVaultWithDetails(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string[],
          string[],
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber[]
        ] & {
          shortOtokens: string[];
          longOtokens: string[];
          collateralAssets: string[];
          shortAmounts: BigNumber[];
          longAmounts: BigNumber[];
          collateralAmounts: BigNumber[];
        },
        BigNumber,
        BigNumber
      ]
    >;

    harvest(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasExpiredAndSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAutomatorEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isOperatorOf(_owner: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidVaultId(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        owner: string;
        otoken: string;
        amount: BigNumber;
        vaultId: BigNumber;
        isSeller: boolean;
        toETH: boolean;
        fee: BigNumber;
        finished: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    refreshConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddressBook(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAutomator(
      _automator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAutomatorTreasury(
      _automatorTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRedeemFee(
      _redeemFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSettleFee(
      _settleFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    shouldProcessOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    shouldRedeemOtoken(
      _owner: string,
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    shouldSettleVault(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    startAutomator(
      _resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopAutomator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(overrides?: CallOverrides): Promise<[string]>;

    withdrawFund(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressBook(overrides?: CallOverrides): Promise<string>;

  automator(overrides?: CallOverrides): Promise<string>;

  automatorTreasury(overrides?: CallOverrides): Promise<string>;

  calculator(overrides?: CallOverrides): Promise<string>;

  cancelOrder(
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  createOrder(
    _otoken: string,
    _amount: BigNumberish,
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getExcessCollateral(
    _vault: {
      shortOtokens: string[];
      longOtokens: string[];
      collateralAssets: string[];
      shortAmounts: BigNumberish[];
      longAmounts: BigNumberish[];
      collateralAmounts: BigNumberish[];
    },
    _typeVault: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getOrder(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      boolean
    ] & {
      owner: string;
      otoken: string;
      amount: BigNumber;
      vaultId: BigNumber;
      isSeller: boolean;
      toETH: boolean;
      fee: BigNumber;
      finished: boolean;
    }
  >;

  getOrders(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      boolean
    ] & {
      owner: string;
      otoken: string;
      amount: BigNumber;
      vaultId: BigNumber;
      isSeller: boolean;
      toETH: boolean;
      fee: BigNumber;
      finished: boolean;
    })[]
  >;

  getOrdersLength(overrides?: CallOverrides): Promise<BigNumber>;

  getRedeemPayout(
    _otoken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedeemableAmount(
    _owner: string,
    _otoken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultOtoken(
    _vault: {
      shortOtokens: string[];
      longOtokens: string[];
      collateralAssets: string[];
      shortAmounts: BigNumberish[];
      longAmounts: BigNumberish[];
      collateralAmounts: BigNumberish[];
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultWithDetails(
    _owner: string,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string[], string[], string[], BigNumber[], BigNumber[], BigNumber[]] & {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumber[];
        longAmounts: BigNumber[];
        collateralAmounts: BigNumber[];
      },
      BigNumber,
      BigNumber
    ]
  >;

  harvest(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasExpiredAndSettlementAllowed(
    _otoken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAutomatorEnabled(overrides?: CallOverrides): Promise<boolean>;

  isOperatorOf(_owner: string, overrides?: CallOverrides): Promise<boolean>;

  isSettlementAllowed(
    _otoken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidVaultId(
    _owner: string,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedOtoken(
    _otoken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  orders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      boolean
    ] & {
      owner: string;
      otoken: string;
      amount: BigNumber;
      vaultId: BigNumber;
      isSeller: boolean;
      toETH: boolean;
      fee: BigNumber;
      finished: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  processOrder(
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processOrders(
    _orderIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemFee(overrides?: CallOverrides): Promise<BigNumber>;

  refreshConfig(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddressBook(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAutomator(
    _automator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAutomatorTreasury(
    _automatorTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRedeemFee(
    _redeemFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSettleFee(
    _settleFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleFee(overrides?: CallOverrides): Promise<BigNumber>;

  shouldProcessOrder(
    _orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  shouldRedeemOtoken(
    _owner: string,
    _otoken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  shouldSettleVault(
    _owner: string,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  startAutomator(
    _resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopAutomator(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(overrides?: CallOverrides): Promise<string>;

  withdrawFund(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressBook(overrides?: CallOverrides): Promise<string>;

    automator(overrides?: CallOverrides): Promise<string>;

    automatorTreasury(overrides?: CallOverrides): Promise<string>;

    calculator(overrides?: CallOverrides): Promise<string>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    createOrder(
      _otoken: string,
      _amount: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getExcessCollateral(
      _vault: {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      },
      _typeVault: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        owner: string;
        otoken: string;
        amount: BigNumber;
        vaultId: BigNumber;
        isSeller: boolean;
        toETH: boolean;
        fee: BigNumber;
        finished: boolean;
      }
    >;

    getOrders(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        owner: string;
        otoken: string;
        amount: BigNumber;
        vaultId: BigNumber;
        isSeller: boolean;
        toETH: boolean;
        fee: BigNumber;
        finished: boolean;
      })[]
    >;

    getOrdersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemableAmount(
      _owner: string,
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultOtoken(
      _vault: {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultWithDetails(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string[],
          string[],
          string[],
          BigNumber[],
          BigNumber[],
          BigNumber[]
        ] & {
          shortOtokens: string[];
          longOtokens: string[];
          collateralAssets: string[];
          shortAmounts: BigNumber[];
          longAmounts: BigNumber[];
          collateralAmounts: BigNumber[];
        },
        BigNumber,
        BigNumber
      ]
    >;

    harvest(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasExpiredAndSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAutomatorEnabled(overrides?: CallOverrides): Promise<boolean>;

    isOperatorOf(_owner: string, overrides?: CallOverrides): Promise<boolean>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidVaultId(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        boolean
      ] & {
        owner: string;
        otoken: string;
        amount: BigNumber;
        vaultId: BigNumber;
        isSeller: boolean;
        toETH: boolean;
        fee: BigNumber;
        finished: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    processOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    processOrders(
      _orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    refreshConfig(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddressBook(_address: string, overrides?: CallOverrides): Promise<void>;

    setAutomator(_automator: string, overrides?: CallOverrides): Promise<void>;

    setAutomatorTreasury(
      _automatorTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedeemFee(
      _redeemFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettleFee(
      _settleFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleFee(overrides?: CallOverrides): Promise<BigNumber>;

    shouldProcessOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shouldRedeemOtoken(
      _owner: string,
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shouldSettleVault(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    startAutomator(_resolver: string, overrides?: CallOverrides): Promise<void>;

    stopAutomator(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(overrides?: CallOverrides): Promise<string>;

    withdrawFund(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OrderCreated(
      orderId?: BigNumberish | null,
      owner?: string | null,
      otoken?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { orderId: BigNumber; owner: string; otoken: string }
    >;

    OrderFinished(
      orderId?: BigNumberish | null,
      cancelled?: boolean | null
    ): TypedEventFilter<
      [BigNumber, boolean],
      { orderId: BigNumber; cancelled: boolean }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addressBook(overrides?: CallOverrides): Promise<BigNumber>;

    automator(overrides?: CallOverrides): Promise<BigNumber>;

    automatorTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    calculator(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    createOrder(
      _otoken: string,
      _amount: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getExcessCollateral(
      _vault: {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      },
      _typeVault: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrders(overrides?: CallOverrides): Promise<BigNumber>;

    getOrdersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemableAmount(
      _owner: string,
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultOtoken(
      _vault: {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWithDetails(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasExpiredAndSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAutomatorEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isOperatorOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidVaultId(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemFee(overrides?: CallOverrides): Promise<BigNumber>;

    refreshConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddressBook(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAutomator(
      _automator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAutomatorTreasury(
      _automatorTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRedeemFee(
      _redeemFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSettleFee(
      _settleFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleFee(overrides?: CallOverrides): Promise<BigNumber>;

    shouldProcessOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shouldRedeemOtoken(
      _owner: string,
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shouldSettleVault(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startAutomator(
      _resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopAutomator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFund(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    automator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    automatorTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createOrder(
      _otoken: string,
      _amount: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getExcessCollateral(
      _vault: {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      },
      _typeVault: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrdersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedeemPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedeemableAmount(
      _owner: string,
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultOtoken(
      _vault: {
        shortOtokens: string[];
        longOtokens: string[];
        collateralAssets: string[];
        shortAmounts: BigNumberish[];
        longAmounts: BigNumberish[];
        collateralAmounts: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultWithDetails(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasExpiredAndSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAutomatorEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperatorOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSettlementAllowed(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidVaultId(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processOrders(
      _orderIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refreshConfig(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddressBook(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAutomator(
      _automator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAutomatorTreasury(
      _automatorTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRedeemFee(
      _redeemFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSettleFee(
      _settleFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shouldProcessOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shouldRedeemOtoken(
      _owner: string,
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shouldSettleVault(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startAutomator(
      _resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopAutomator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFund(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
